{"version":3,"file":"modal.min.js","sources":["../../src/ajax_form/modal.js"],"sourcesContent":["// This file is part of MuTMS suite of plugins for Moodleâ„¢ LMS.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * A helper for embedding of ajax forms in modal dialogs.\n *\n * This code is based on lib/form/amd/src/modalform.js\n *\n * @module     tool_mulib/ajax_form/modal\n * @copyright  2025 Petr Skoda\n * @license    https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n **/\n\nimport $ from 'jquery';\nimport Modal from 'core/modal';\nimport Fragment from 'core/fragment';\nimport * as Notification from 'core/notification';\nimport * as FormEvents from 'core_form/events';\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport Pending from 'core/pending';\n\nconst STATUSES = {\n    CANCELLED: 'cancelled',\n    RENDER: 'render',\n    SUBMITTED: 'submitted',\n};\n\nconst ACTIONS = {\n    NOTHING: 'nothing',\n    REDIRECT: 'redirect',\n    RELOAD: 'reload',\n};\n\n/**\n * @class tool_mulib/ajax_form/modal\n * @extends module:core/modal\n */\nexport default class AjaxFormModal extends Modal {\n    static TYPE = 'tool_mulib-ajax_form_modal';\n    static TEMPLATE = 'tool_mulib/ajax_form/modal';\n\n    /**\n     * Constructor for the Modal.\n     *\n     * @param {HTMLElement} root The root jQuery element for the modal\n     */\n    constructor(root) {\n        super(root);\n\n        this.reloadingForm = false;\n        this.formUrl = null;\n        this.formSubmittedAction = null;\n    }\n\n    /**\n     * Configure the modal ajax form.\n     *\n     * @param {ModalConfig} modalConfig Modal configuration options\n     */\n    configure(modalConfig) {\n        this.formUrl = modalConfig.formUrl;\n        this.formSubmittedAction = modalConfig.formSubmittedAction;\n\n        modalConfig.show = false;\n        modalConfig.removeOnClose = true;\n\n        super.configure(modalConfig);\n\n        if (modalConfig.formSize === 'lg' || modalConfig.formSize === 'xl') {\n            this.getModal().addClass(`modal-${modalConfig.formSize}`);\n        }\n\n        this.show();\n    }\n\n    /**\n     * Register all event listeners.\n     *\n     * @method registerEventListeners\n     */\n    registerEventListeners() {\n        super.registerEventListeners();\n\n        this.getBody().on('click', 'form input[type=submit]', (e) => {\n            this.submitAjaxForm(e);\n        });\n\n        // Allow submitting via ENTER key in text field.\n        this.getRoot().on('submit', 'form', (e) => {\n            this.submitAjaxForm.bind(e);\n        });\n    }\n\n    /**\n     * Returns form element.\n     *\n     * @returns {HTMLFormElement}\n     */\n    getForm() {\n        return this.getRoot().find('form')[0];\n    }\n\n    /**\n     * Validates form.\n     *\n     * @method validateElements\n     * @returns {boolean}\n     */\n    validateElements() {\n        FormEvents.notifyFormSubmittedByJavascript(this.getForm());\n\n        const invalid = this.getRoot().find('[aria-invalid=\"true\"], .error');\n        if (invalid.length) {\n            invalid.first().focus();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Submit form.\n     *\n     * @method submitAjaxForm\n     * @param {Event} e\n     */\n    submitAjaxForm(e) {\n        e.preventDefault();\n\n        if (e.target.dataset.cancel === '1') {\n            FormChangeChecker.resetAllFormDirtyStates();\n            this.destroy();\n            return;\n        }\n\n        if (e.target.dataset.skipValidation !== '1') {\n            if (!this.validateElements()) {\n                return;\n            }\n        }\n\n        const form = this.getRoot().find('form');\n        let formData = form.serialize();\n\n        if (e.target.type === 'submit') {\n            formData = formData + '&' + encodeURIComponent(e.target.name) + '=' + encodeURIComponent(e.target.value);\n        }\n\n        FormChangeChecker.resetAllFormDirtyStates();\n\n        this.reloadForm(formData);\n    }\n\n    /**\n     * Reload form and render it.\n     *\n     * @method reloadForm\n     * @param {String} formData\n     * @returns void\n     */\n    reloadForm(formData) {\n        if (this.reloadingForm) {\n            return;\n        }\n        this.reloadingForm = true;\n        const pendingPromise = new Pending('tool_mulib/modal_ajax_form:reload');\n\n        this.disableSubmitButtons();\n\n        const settings = {\n            async: true,\n            data: formData,\n            dataType: 'json',\n            processData: false,\n            timeout: 0,\n            type: 'POST',\n        };\n\n        const renderPromise = $.Deferred();\n        if (formData === '') {\n            this.setBody(renderPromise.promise());\n        } else {\n            this.startSubmitting();\n        }\n\n        $.ajax(this.formUrl, settings)\n            .done((response) => {\n                if (!response) {\n                    throw new Error('Invalid server response');\n                } else if (response.error) {\n                    // Exception in ajax form script.\n                    Notification.exception(response);\n                } else if (response.data?.status) {\n                    if (response.data.status === STATUSES.RENDER) {\n                        if (formData !== '') {\n                            this.setBody(renderPromise.promise());\n                        }\n                        renderPromise.resolve(response.data.html, Fragment.processCollectedJavascript(response.data.javascript));\n                        if (response.data.dialogtitle !== '') {\n                            this.setTitle(response.data.dialogtitle);\n                        }\n                        this.enableSubmitButtons();\n                    } else if (response.data.status === STATUSES.CANCELLED) {\n                        // This should not happen because cancel and close buttons are in JS only.\n                        this.destroy();\n                    } else if (response.data.status === STATUSES.SUBMITTED) {\n                        // Remove the form data, the redirect or callback may take a few moments.\n                        renderPromise.resolve('', '');\n                        if (typeof this.formSubmittedAction === 'function') {\n                            const callback = this.formSubmittedAction;\n                            this.destroy();\n                            callback(response.data.callbackdata);\n                        } else if (this.formSubmittedAction === ACTIONS.RELOAD) {\n                            FormChangeChecker.disableAllChecks();\n                            window.location.reload();\n                        } else if (this.formSubmittedAction === ACTIONS.REDIRECT) {\n                            FormChangeChecker.disableAllChecks();\n                            window.location = response.data.redirecturl;\n                        } else {\n                            // Option ACTIONS.NOTHING does not do anything.\n                            this.destroy();\n                        }\n                    } else {\n                        Notification.exception(new Error('Invalid form data.status value received'));\n                    }\n                } else {\n                    Notification.exception(new Error('Invalid server response'));\n                }\n            })\n            .catch((ex) => {\n                Notification.exception(ex);\n            })\n            .always(() => {\n                pendingPromise.resolve();\n                this.finishSubmitting();\n                this.reloadingForm = false;\n            });\n    }\n\n    /**\n     * Disable the submit buttons.\n     *\n     * @method disableSubmitButtons\n     */\n    disableSubmitButtons() {\n        const buttons = this.getBody().find('form input[type=submit]');\n        buttons.prop('disabled', true);\n    }\n\n    /**\n     * Re-enable the submit button.\n     *\n     * @method enableSubmitButtons\n     */\n    enableSubmitButtons() {\n        const buttons = this.getBody().find('form input[type=submit]');\n        buttons.prop('disabled', false);\n    }\n\n    /**\n     * Disable the submit buttons.\n     *\n     * @method startSubmitting\n     */\n    startSubmitting() {\n        const submitting = this.getBody().find('[data-region=\"submitting-icon-container\"]');\n        submitting.removeClass('hidden');\n    }\n\n    /**\n     * Re-enable the submit button.\n     *\n     * @method finishSubmitting\n     */\n    finishSubmitting() {\n        const submitting = this.getBody().find('[data-region=\"submitting-icon-container\"]');\n        submitting.addClass('hidden');\n    }\n\n    /**\n     * Show modal.\n     *\n     * @method show\n     * @returns {Promise}\n     */\n    show() {\n        this.reloadForm('');\n        return super.show();\n    }\n\n    /**\n     * Hide modal.\n     *\n     * @method hide\n     * @returns void\n     */\n    hide() {\n        // Prevent any interruptions or autosaving.\n        const form = this.getForm();\n        FormEvents.notifyFormSubmittedByJavascript(form, true);\n        FormChangeChecker.resetFormDirtyState(form);\n\n        super.hide();\n    }\n}\n\nAjaxFormModal.registerModalType();\n"],"names":["STATUSES","ACTIONS","AjaxFormModal","Modal","constructor","root","reloadingForm","formUrl","formSubmittedAction","configure","modalConfig","show","removeOnClose","formSize","getModal","addClass","registerEventListeners","getBody","on","e","submitAjaxForm","getRoot","bind","getForm","this","find","validateElements","FormEvents","notifyFormSubmittedByJavascript","invalid","length","first","focus","preventDefault","target","dataset","cancel","FormChangeChecker","resetAllFormDirtyStates","destroy","skipValidation","formData","serialize","type","encodeURIComponent","name","value","reloadForm","pendingPromise","Pending","disableSubmitButtons","settings","async","data","dataType","processData","timeout","renderPromise","$","Deferred","setBody","promise","startSubmitting","ajax","done","response","Error","error","Notification","exception","_response$data","status","resolve","html","Fragment","processCollectedJavascript","javascript","dialogtitle","setTitle","enableSubmitButtons","callback","callbackdata","disableAllChecks","window","location","reload","redirecturl","catch","ex","always","finishSubmitting","prop","removeClass","super","hide","form","resetFormDirtyState","registerModalType"],"mappings":"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"}