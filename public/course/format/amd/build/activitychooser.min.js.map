{"version":3,"file":"activitychooser.min.js","sources":["../src/activitychooser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing modules in a course.\n *\n * @module     core_courseformat/activitychooser\n * @copyright  2020 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as ChooserDialogue from 'core_courseformat/local/activitychooser/dialogue';\nimport CustomEvents from 'core/custom_interaction_events';\nimport Log from 'core/log';\nimport Pending from 'core/pending';\nimport * as Repository from 'core_courseformat/local/activitychooser/repository';\nimport selectors from 'core_courseformat/local/activitychooser/selectors';\n\nlet initialized = false;\n\n/**\n * Set up the activity chooser.\n *\n * @method init\n * @param {Number} courseId Course ID to use later on in fetchModules()\n * @param {Object|null} chooserConfig Any PHP config settings that we may need to reference\n */\nexport const init = (courseId, chooserConfig = null) => {\n    const pendingPromise = new Pending();\n\n    // TODO: Remove the chooserConfig in Moodle 6.0 (MDL-85655)\n    if (chooserConfig?.tabmode !== undefined) {\n        window.console.warn('The tabmode config option has been deprecated and will be ignored.');\n    }\n\n    registerListenerEvents(courseId);\n\n    pendingPromise.resolve();\n};\n\n/**\n * Once a selection has been made make the modal & module information and pass it along\n *\n * @method registerListenerEvents\n * @param {Number} courseId\n */\nconst registerListenerEvents = (courseId) => {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n\n    const eventsToHandle = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n\n    CustomEvents.define(document, eventsToHandle);\n\n    // Display module chooser event listeners.\n    eventsToHandle.forEach((eventToHandle) => {\n        document.addEventListener(eventToHandle, async(event) => {\n            if (!event.target.closest(selectors.elements.sectionmodchooser)) {\n                return;\n            }\n            const position = getCoursePositionFromTarget(event.target);\n\n            const footerDataPromise = Repository.getModalFooterData(courseId, position.sectionNum);\n\n            let modulesDataPromise;\n            if (position.sectionId && position.sectionId !== '') {\n                modulesDataPromise = Repository.getSectionModulesData(\n                    courseId,\n                    position.sectionId,\n                    position.sectionReturnNum,\n                    position.beforeMod,\n                );\n            } else {\n                // Todo remove this else in Moodle 6.0 (MDL-86310)\n                Log.debug(\n                    'Having only the section number attribute in the activity chooser is deprecated. ' +\n                    'Please add the data-section-id attribute.'\n                );\n                modulesDataPromise = Repository.getModulesData(\n                    courseId,\n                    position.sectionNum,\n                    position.sectionReturnNum,\n                    position.beforeMod,\n                );\n            }\n\n            ChooserDialogue.displayActivityChooserModal(footerDataPromise, modulesDataPromise);\n        });\n    });\n};\n\n/**\n * Return the course position of a target add activity element.\n *\n * @param {HTMLElement} target The target element.\n * @return {Object} The course position of the target.\n * @property {Number} sectionNum The section number.\n * @property {Number|null} sectionId The section id.\n * @property {Number|null} sectionReturnNum The section return number.\n * @property {Number|null} sectionReturnId The section return id.\n * @property {Number|null} beforeMod The ID of the cm to add the modules before.\n */\nfunction getCoursePositionFromTarget(target) {\n    let caller;\n    let sectionNum = null;\n    let sectionId = null;\n    // We need to know who called this.\n    // Standard courses use the ID in the main section info.\n    const sectionDiv = target.closest(selectors.elements.section);\n    // Front page courses need some special handling.\n    const button = target.closest(selectors.elements.sectionmodchooser);\n\n    // If we don't have a section number use the fallback ID.\n    // We always want the sectionDiv caller first as it keeps track of section number's after DnD changes.\n    // The button attribute is always just a fallback for us as the section div is not always available.\n    // A YUI change could be done maybe to only update the button attribute but we are going for minimal change here.\n    if (\n        sectionDiv !== null\n        && (sectionDiv.hasAttribute('data-number') || sectionDiv.hasAttribute('data-id'))\n    ) {\n        // We check for attributes just in case of outdated contrib course formats.\n        caller = sectionDiv;\n        sectionNum = sectionDiv.getAttribute('data-number');\n        sectionId = sectionDiv.getAttribute('data-id');\n    } else {\n        caller = button;\n        if (caller.hasAttribute('data-sectionid')) {\n            window.console.warn(\n                'The data-sectionid attribute has been deprecated. ' +\n                'Please update your code to use data-section-id passing the real section ID instead.'\n            );\n            caller.setAttribute('data-sectionnum', caller.dataset.sectionid);\n        }\n        sectionNum = caller.dataset.sectionnum;\n        sectionId = caller.getAttribute('data-section-id');\n    }\n    return {\n        sectionNum,\n        sectionId,\n        // The old data attribute for the section return number was data-sectionreturn.\n        sectionReturnNum: caller.dataset?.sectionreturnnum ?? caller.dataset?.sectionreturn ?? null,\n        sectionReturnId: caller.dataset?.sectionreturnid ?? null,\n        beforeMod: caller.dataset?.beforemod ?? null,\n    };\n}\n"],"names":["initialized","courseId","chooserConfig","pendingPromise","Pending","undefined","tabmode","window","console","warn","registerListenerEvents","resolve","eventsToHandle","CustomEvents","events","activate","keyboardActivate","define","document","forEach","eventToHandle","addEventListener","async","event","target","closest","selectors","elements","sectionmodchooser","position","caller","sectionNum","sectionId","sectionDiv","section","button","hasAttribute","getAttribute","setAttribute","dataset","sectionid","sectionnum","sectionReturnNum","_caller$dataset","sectionreturnnum","_caller$dataset2","sectionreturn","sectionReturnId","_caller$dataset3","sectionreturnid","beforeMod","_caller$dataset4","beforemod","getCoursePositionFromTarget","footerDataPromise","Repository","getModalFooterData","modulesDataPromise","getSectionModulesData","debug","getModulesData","ChooserDialogue","displayActivityChooserModal"],"mappings":";;;;;;;sYA8BIA,aAAc,gBASE,SAACC,cAAUC,qEAAgB,WACrCC,eAAiB,IAAIC,sBAGIC,KAA3BH,MAAAA,qBAAAA,cAAeI,UACfC,OAAOC,QAAQC,KAAK,sEAGxBC,uBAAuBT,UAEvBE,eAAeQ,iBASbD,uBAA0BT,cACxBD,mBAGJA,aAAc,QAERY,eAAiB,CACnB,QACAC,mCAAaC,OAAOC,SACpBF,mCAAaC,OAAOE,qDAGXC,OAAOC,SAAUN,gBAG9BA,eAAeO,SAASC,gBACpBF,SAASG,iBAAiBD,eAAeE,MAAAA,YAChCC,MAAMC,OAAOC,QAAQC,mBAAUC,SAASC,gCAGvCC,kBA0CmBL,2JAC7BM,OACAC,WAAa,KACbC,UAAY,WAGVC,WAAaT,OAAOC,QAAQC,mBAAUC,SAASO,SAE/CC,OAASX,OAAOC,QAAQC,mBAAUC,SAASC,mBAO9B,OAAfK,aACIA,WAAWG,aAAa,gBAAkBH,WAAWG,aAAa,aAGtEN,OAASG,WACTF,WAAaE,WAAWI,aAAa,eACrCL,UAAYC,WAAWI,aAAa,aAEpCP,OAASK,OACLL,OAAOM,aAAa,oBACpB7B,OAAOC,QAAQC,KACX,yIAGJqB,OAAOQ,aAAa,kBAAmBR,OAAOS,QAAQC,YAE1DT,WAAaD,OAAOS,QAAQE,WAC5BT,UAAYF,OAAOO,aAAa,0BAE7B,CACHN,WAAAA,WACAC,UAAAA,UAEAU,oFAAkBZ,OAAOS,0CAAPI,gBAAgBC,iGAAoBd,OAAOS,2CAAPM,iBAAgBC,mCAAiB,KACvFC,wEAAiBjB,OAAOS,2CAAPS,iBAAgBC,yEAAmB,KACpDC,iEAAWpB,OAAOS,2CAAPY,iBAAgBC,iEAAa,MAlFnBC,CAA4B9B,MAAMC,QAE7C8B,kBAAoBC,WAAWC,mBAAmBvD,SAAU4B,SAASE,gBAEvE0B,mBACA5B,SAASG,WAAoC,KAAvBH,SAASG,UAC/ByB,mBAAqBF,WAAWG,sBAC5BzD,SACA4B,SAASG,UACTH,SAASa,iBACTb,SAASqB,yBAITS,MACA,6HAGJF,mBAAqBF,WAAWK,eAC5B3D,SACA4B,SAASE,WACTF,SAASa,iBACTb,SAASqB,YAIjBW,gBAAgBC,4BAA4BR,kBAAmBG"}