{"version":3,"file":"repository.min.js","sources":["../../../src/local/activitychooser/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle user AJAX actions.\n *\n * @module     core_courseformat/local/activitychooser/repository\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ajax from 'core/ajax';\nimport Log from 'core/log';\n\n// A promises map for caching specific section modules data.\nconst sectionsModulesPromises = new Map();\n\n// A promises map for caching a specific section footer data.\nconst sectionsFooterPromises = new Map();\n\n/**\n * Fetch all the information on modules we'll need in the activity chooser.\n *\n * @method activityModules\n * @deprecated since Moodle 5.1\n * @todo Remove in Moodle 6.0 (MDL-86310)\n * @param {Number} courseid What course to fetch the modules for\n * @param {Number} sectionnum What course section to fetch the modules for\n * @return {object} jQuery promise\n */\nexport const activityModules = (courseid, sectionnum) => {\n    Log.debug('The activityModules function is deprecated. Use sectionActivityModules instead.');\n    const request = {\n        methodname: 'core_course_get_course_content_items',\n        args: {\n            courseid: courseid,\n            sectionnum: sectionnum,\n        },\n    };\n    return ajax.call([request])[0];\n};\n\n/**\n * Fetch all the information on modules that can be added to a section.\n *\n * @method sectionActivityModules\n * @param {Number} courseId What course to fetch the modules for\n * @param {Number} sectionId What course section to fetch the modules for\n * @return {object} jQuery promise\n */\nexport const sectionActivityModules = (courseId, sectionId) => {\n    const request = {\n        methodname: 'core_courseformat_get_section_content_items',\n        args: {\n            courseid: courseId,\n            sectionid: sectionId,\n        },\n    };\n    return ajax.call([request])[0];\n};\n\n/**\n * Given a module name, module ID & the current course we want to specify that the module\n * is a users' favourite.\n *\n * @method favouriteModule\n * @param {String} modName Frankenstyle name of the component to add favourite\n * @param {int} modID ID of the module. Mainly for LTI cases where they have same / similar names\n * @return {object} jQuery promise\n */\nexport const favouriteModule = (modName, modID) => {\n    const request = {\n        methodname: 'core_course_add_content_item_to_user_favourites',\n        args: {\n            componentname: modName,\n            contentitemid: modID,\n        },\n    };\n    const promise = ajax.call([request])[0];\n    // After the promise is resolved, we need to invalidate the cache for the section.\n    return promise.then(() => {\n        sectionsModulesPromises.clear();\n        return true;\n    });\n};\n\n/**\n * Given a module name, module ID & the current course we want to specify that the module\n * is no longer a users' favourite.\n *\n * @method unfavouriteModule\n * @param {String} modName Frankenstyle name of the component to add favourite\n * @param {int} modID ID of the module. Mainly for LTI cases where they have same / similar names\n * @return {object} jQuery promise\n */\nexport const unfavouriteModule = (modName, modID) => {\n    const request = {\n        methodname: 'core_course_remove_content_item_from_user_favourites',\n        args: {\n            componentname: modName,\n            contentitemid: modID,\n        },\n    };\n\n    const promise = ajax.call([request])[0];\n    // After the promise is resolved, we need to invalidate the cache for the section.\n    return promise.then(() => {\n        sectionsModulesPromises.clear();\n        return true;\n    });\n};\n\n/**\n * Fetch all the information on modules we'll need in the activity chooser.\n *\n * @method fetchFooterData\n * @param {Number} courseid What course to fetch the data for\n * @param {Number} sectionid What section to fetch the data for\n * @return {object} jQuery promise\n */\nexport const fetchFooterData = (courseid, sectionid) => {\n    const request = {\n        methodname: 'core_course_get_activity_chooser_footer',\n        args: {\n            courseid: courseid,\n            sectionid: sectionid,\n        },\n    };\n    return ajax.call([request])[0];\n};\n\n/**\n * Legacy method to fetch all the information on modules using section number.\n *\n * @method fetchSectionModules\n *\n * @deprecated since Moodle 5.1\n * @todo Remove in Moodle 6.0 (MDL-86310)\n * @param {Number} courseId Course ID.\n * @param {Number} sectionNum Section number.\n * @param {Number} sectionReturnNum Section return.\n * @param {Number} beforeMod Before module number to be used in the module.\n * @return {Object} Tab data.\n */\nexport async function getModulesData(courseId, sectionNum, sectionReturnNum, beforeMod) {\n    Log.debug('The getModulesData function is deprecated. Use getSectionModulesData instead.');\n    const cacheKey = `${courseId}-${sectionNum}`;\n    if (!sectionsModulesPromises.has(cacheKey)) {\n        sectionsModulesPromises.set(\n            cacheKey,\n            new Promise((resolve) => {\n                resolve(activityModules(courseId, sectionNum));\n            })\n        );\n    }\n\n    const moduleData = await sectionsModulesPromises.get(cacheKey);\n\n    // Early return if there is no module data.\n    if (!moduleData) {\n        throw new Error('Cannot fetch module data');\n    }\n\n    // Apply the section num to all the module instance links.\n    return sectionMapper(\n        moduleData,\n        null, // We do not have a section ID here.\n        sectionReturnNum,\n        beforeMod,\n        sectionNum, // Legacy section number.\n    );\n}\n\n/**\n * Fetch all the information on modules we'll need in the activity chooser.\n *\n * @method fetchSectionModules\n *\n * @param {Number} courseId Course ID.\n * @param {Number} sectionId Section ID.\n * @param {Number} sectionReturnNum Section return.\n * @param {Number} beforeMod Before module number to be used in the module.\n * @return {Object} Tab data.\n */\nexport async function getSectionModulesData(courseId, sectionId, sectionReturnNum, beforeMod) {\n    const cacheKey = `${courseId}-${sectionId}`;\n    if (!sectionsModulesPromises.has(cacheKey)) {\n        sectionsModulesPromises.set(\n            cacheKey,\n            new Promise((resolve) => {\n                resolve(sectionActivityModules(courseId, sectionId));\n            })\n        );\n    }\n\n    const moduleData = await sectionsModulesPromises.get(cacheKey);\n\n    // Early return if there is no module data.\n    if (!moduleData) {\n        throw new Error('Cannot fetch module data');\n    }\n\n    // Apply the section num to all the module instance links.\n    return sectionMapper(\n        moduleData,\n        sectionId,\n        sectionReturnNum,\n        beforeMod,\n    );\n}\n\n/**\n * Given the web service data and an ID we want to make a deep copy\n * of the WS data then add on the section num to the addoption URL\n *\n * @method sectionMapper\n * @TODO remove legacySectionNum param in Moodle 6.0 (MDL-86310)\n * @param {Object} webServiceData Our original data from the Web service call\n * @param {Number} sectionId The number of the section we need to append to the links\n * @param {Number|null} sectionReturnNum The number of the section return we need to append to the links\n * @param {Number|null} beforeMod The ID of the cm we need to append to the links\n * @param {Number|null} legacySectionNum The legacy section number to append to the links\n * @return {Array} [modules] with URL's built\n */\nfunction sectionMapper(webServiceData, sectionId, sectionReturnNum, beforeMod, legacySectionNum = null) {\n    // We need to take a fresh deep copy of the original data as an object is a reference type.\n    const newData = JSON.parse(JSON.stringify(webServiceData));\n    let urlParams = '&beforemod=' + (beforeMod ?? 0);\n    if (sectionId) {\n        urlParams += `&sectionid=${sectionId}`;\n    }\n    // Todo: Remove legacySectionNum in Moodle 6.0 (MDL-86310).\n    if (legacySectionNum) {\n        urlParams += `&section=${legacySectionNum}`;\n    }\n    if (sectionReturnNum) {\n        urlParams += `&sr=${sectionReturnNum}`;\n    }\n    newData.content_items.forEach((module) => {\n        module.link += urlParams;\n    });\n    return newData.content_items;\n}\n\n/**\n * Fetch the footer data for a specific section.\n *\n * @param {Number} courseId Course ID.\n * @param {Number} sectionNum Section number.\n * @return {Promise<Object>} Promise resolved with the footer data.\n */\nexport async function getModalFooterData(courseId, sectionNum) {\n    const cacheKey = `${courseId}-${sectionNum}`;\n    if (sectionsFooterPromises.has(cacheKey)) {\n        return sectionsFooterPromises.get(cacheKey);\n    }\n\n    sectionsFooterPromises.set(\n        cacheKey,\n        new Promise((resolve) => {\n            resolve(fetchFooterData(courseId, sectionNum));\n        })\n    );\n    return sectionsFooterPromises.get(cacheKey);\n}\n"],"names":["courseId","sectionNum","cacheKey","sectionsFooterPromises","has","get","set","Promise","resolve","fetchFooterData","sectionReturnNum","beforeMod","debug","sectionsModulesPromises","activityModules","moduleData","Error","sectionMapper","sectionId","sectionActivityModules","Map","courseid","sectionnum","request","methodname","args","ajax","call","sectionid","modName","modID","componentname","contentitemid","then","clear","webServiceData","legacySectionNum","newData","JSON","parse","stringify","urlParams","content_items","forEach","module","link"],"mappings":";;;;;;;0LAsQyCA,SAAUC,kBACzCC,mBAAcF,qBAAYC,eAC5BE,uBAAuBC,IAAIF,iBACpBC,uBAAuBE,IAAIH,iBAGtCC,uBAAuBG,IACnBJ,SACA,IAAIK,SAASC,UACTA,QAAQC,gBAAgBT,SAAUC,iBAGnCE,uBAAuBE,IAAIH,kDAvHDF,SAAUC,WAAYS,iBAAkBC,wBACrEC,MAAM,uFACJV,mBAAcF,qBAAYC,YAC3BY,wBAAwBT,IAAIF,WAC7BW,wBAAwBP,IACpBJ,SACA,IAAIK,SAASC,UACTA,QAAQM,gBAAgBd,SAAUC,uBAKxCc,iBAAmBF,wBAAwBR,IAAIH,cAGhDa,iBACK,IAAIC,MAAM,mCAIbC,cACHF,WACA,KACAL,iBACAC,UACAV,2DAeoCD,SAAUkB,UAAWR,iBAAkBC,iBACzET,mBAAcF,qBAAYkB,WAC3BL,wBAAwBT,IAAIF,WAC7BW,wBAAwBP,IACpBJ,SACA,IAAIK,SAASC,UACTA,QAAQW,uBAAuBnB,SAAUkB,sBAK/CH,iBAAmBF,wBAAwBR,IAAIH,cAGhDa,iBACK,IAAIC,MAAM,mCAIbC,cACHF,WACAG,UACAR,iBACAC,0JAhMFE,wBAA0B,IAAIO,IAG9BjB,uBAAyB,IAAIiB,IAYtBN,gBAAkB,CAACO,SAAUC,2BAClCV,MAAM,yFACJW,QAAU,CACZC,WAAY,uCACZC,KAAM,CACFJ,SAAUA,SACVC,WAAYA,oBAGbI,cAAKC,KAAK,CAACJ,UAAU,mDAWnBJ,uBAAyB,CAACnB,SAAUkB,mBACvCK,QAAU,CACZC,WAAY,8CACZC,KAAM,CACFJ,SAAUrB,SACV4B,UAAWV,mBAGZQ,cAAKC,KAAK,CAACJ,UAAU,oFAYD,CAACM,QAASC,eAC/BP,QAAU,CACZC,WAAY,kDACZC,KAAM,CACFM,cAAeF,QACfG,cAAeF,eAGPJ,cAAKC,KAAK,CAACJ,UAAU,GAEtBU,MAAK,KAChBpB,wBAAwBqB,SACjB,iCAakB,CAACL,QAASC,eACjCP,QAAU,CACZC,WAAY,uDACZC,KAAM,CACFM,cAAeF,QACfG,cAAeF,eAIPJ,cAAKC,KAAK,CAACJ,UAAU,GAEtBU,MAAK,KAChBpB,wBAAwBqB,SACjB,YAYFzB,gBAAkB,CAACY,SAAUO,mBAChCL,QAAU,CACZC,WAAY,0CACZC,KAAM,CACFJ,SAAUA,SACVO,UAAWA,mBAGZF,cAAKC,KAAK,CAACJ,UAAU,aAgGvBN,cAAckB,eAAgBjB,UAAWR,iBAAkBC,eAAWyB,wEAAmB,WAExFC,QAAUC,KAAKC,MAAMD,KAAKE,UAAUL,qBACtCM,UAAY,eAAiB9B,MAAAA,UAAAA,UAAa,UAC1CO,YACAuB,gCAA2BvB,YAG3BkB,mBACAK,8BAAyBL,mBAEzB1B,mBACA+B,yBAAoB/B,mBAExB2B,QAAQK,cAAcC,SAASC,SAC3BA,OAAOC,MAAQJ,aAEZJ,QAAQK"}