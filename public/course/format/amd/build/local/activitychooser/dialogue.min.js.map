{"version":3,"file":"dialogue.min.js","sources":["../../../src/local/activitychooser/dialogue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing options.\n *\n * @module     core_courseformat/local/activitychooser/dialogue\n * @copyright  2019 Mihail Geshoski <mihail@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import {addIconToContainer} from 'core/loadingicon';\nimport {debounce} from 'core/utils';\nimport DialogueDom from 'core_courseformat/local/activitychooser/dialoguedom';\nimport {end, arrowLeft, arrowRight, home, enter, space} from 'core/key_codes';\nimport Exporter from 'core_courseformat/local/activitychooser/exporter';\nimport {getFirst} from 'core/normalise';\nimport {getString} from 'core/str';\nimport Modal from 'core/modal';\nimport * as ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport * as Repository from 'core_courseformat/local/activitychooser/repository';\nimport selectors from 'core_courseformat/local/activitychooser/selectors';\nimport * as Templates from 'core/templates';\nconst getPlugin = pluginName => import(pluginName);\n\n/**\n * Display the activity chooser modal.\n *\n * @method displayActivityChooser\n * @param {Promise} footerDataPromise Promise for the footer data.\n * @param {Promise} modulesDataPromise Promise for the modules data.\n */\nexport async function displayActivityChooserModal(\n    footerDataPromise,\n    modulesDataPromise,\n) {\n    // We want to show the modal instantly but loading whilst waiting for our data.\n    let bodyPromiseResolver;\n    const bodyPromise = new Promise(resolve => {\n        bodyPromiseResolver = resolve;\n    });\n\n    const exporter = new Exporter();\n\n    const footerData = await footerDataPromise;\n\n    const footerPromise = Templates.render(\n        'core_courseformat/local/activitychooser/footer',\n        exporter.getFooterData(footerData),\n    );\n\n    const sectionModal = Modal.create({\n        body: bodyPromise,\n        title: getString('addresourceoractivity'),\n        footer: footerPromise,\n        large: true,\n        scrollable: false,\n        templateContext: {\n            classes: 'modchooser'\n        },\n        show: true,\n    });\n\n    try {\n        const modulesData = await modulesDataPromise;\n\n        if (!modulesData) {\n            return;\n        }\n\n        const modal = await sectionModal;\n        new ActivityChooserDialogue(modal, modulesData, footerData);\n\n        const templateData = await exporter.getModChooserTemplateData(modulesData);\n        bodyPromiseResolver(await Templates.render('core_courseformat/activitychooser', templateData));\n    } catch (error) {\n        const errorTemplateData = {\n            'errormessage': error.message\n        };\n        bodyPromiseResolver(\n            await Templates.render('core_courseformat/local/activitychooser/error', errorTemplateData)\n        );\n        return;\n    }\n}\n\n/**\n * Display the module chooser.\n *\n * @deprecated since Moodle 5.1\n * @todo Remove the method in Moodle 6.0 (MDL-85655).\n * @method displayChooser\n * @param {Promise} modalPromise Our created modal for the section\n * @param {Array} sectionModules An array of all of the built module information\n * @param {Function} partialFavourite Partially applied function we need to manage favourite status\n * @param {Object} footerData Our base footer object.\n */\nexport const displayChooser = (modalPromise, sectionModules, partialFavourite, footerData) => {\n    window.console.warn(\n        'The displayChooser function is deprecated. ' +\n        'Please displayActivityChooserModal instead.'\n    );\n\n    // Register event listeners.\n    modalPromise.then(modal => {\n        new ActivityChooserDialogue(modal, sectionModules, footerData);\n        return modal;\n    }).catch(Notification.exception);\n};\n\n/**\n * Activity Chooser Dialogue class.\n *\n * @private\n */\nclass ActivityChooserDialogue {\n    /**\n     * Constructor for the ActivityChooserDialogue class.\n     * @param {Modal} modal The modal object.\n     * @param {Object} modulesData The data for the modules.\n     * @param {Object} footerData The data for the footer.\n     */\n    constructor(modal, modulesData, footerData) {\n        this.modal = modal;\n        this.dialogueDom = null; // We cannot init until we have the modal body loaded.\n        this.footerData = footerData;\n        this.exporter = new Exporter();\n        this.selectedModule = null;\n        // This attribute marks when the tab content is dirty and needs to be refreshed when the user changes the tab.\n        // We don't want the content to be updated while the user is managing their favourites.\n        this.isFavouriteTabDirty = false;\n        // Make a map so we can quickly fetch a specific module's object for either rendering or searching.\n        this.mappedModules = new Map();\n        modulesData.forEach((module) => {\n            this.mappedModules.set(module.componentname + '_' + module.link, module);\n        });\n        this.init();\n    }\n\n    /**\n     * Initialise the activity chooser dialogue.\n     *\n     * @return {Promise} A promise that resolves when the modal is ready.\n     */\n    async init() {\n        await this.modal.getBodyPromise();\n        await this.modal.getFooterPromise();\n        this.dialogueDom = new DialogueDom(this, this.modal, this.exporter);\n        this.registerModalListenerEvents();\n        this.setupKeyboardAccessibility();\n        // We want to focus on the action select when the dialog is closed.\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\n            this.modal.destroy();\n        });\n        // When modal is open the add button should be disabled because there is no activity selected.\n        this.dialogueDom.unmarkAllChooserOptionAsSelected();\n    }\n\n    /**\n     * Register chooser related event listeners.\n     *\n     * @returns {Promise} A promise that resolves when events are registered\n     */\n    async registerModalListenerEvents() {\n        const modalRoot = getFirst(this.modal.getRoot());\n\n        // Changing the tab should cancel any active search.\n        modalRoot.addEventListener(\n            'shown.bs.tab',\n            (event) => {\n                this.dialogueDom.unmarkAllChooserOptionAsSelected();\n                // The all tab has the search result, so we do not want to clear the search input.\n                if (event.target.closest(selectors.regions.allTabNav)) {\n                    return;\n                }\n                const searchInput = this.dialogueDom.getSearchInputElement();\n                if (searchInput.value.length > 0) {\n                    searchInput.value = \"\";\n                    this.toggleSearchResultsView(searchInput.value);\n                }\n            },\n        );\n\n        // Add the listener for clicks on the full modal.\n        modalRoot.addEventListener(\n            'click',\n            this.handleModalClick.bind(this),\n        );\n        modalRoot.addEventListener(\n            'dblclick',\n            this.handleModalDoubleClick.bind(this),\n        );\n\n        // Add a listener for an input change in the activity chooser's search bar.\n        const searchInput = this.dialogueDom.getSearchInputElement();\n        searchInput.addEventListener(\n            'input',\n            debounce(\n                () => {\n                    this.toggleSearchResultsView(searchInput.value);\n                },\n                300,\n                {pending: true},\n            ),\n        );\n\n        this.dialogueDom.initBootstrapComponents();\n\n        // Handle focus when a new tab is shown.\n        modalRoot.addEventListener('shown.bs.tab', (event) => {\n            if (event.relatedTarget) {\n                this.dialogueDom.disableFocusAllChooserOptions(event.relatedTarget);\n            }\n            this.dialogueDom.initActiveTabNavigation();\n        });\n\n        // Update the favourite tab content when the user changes the tab.\n        modalRoot.addEventListener('shown.bs.tab', () => {\n            if (this.isFavouriteTabDirty && !this.dialogueDom.isFavoutiteTabActive()) {\n                this.refreshFavouritesTabContent();\n            }\n        });\n\n        this.dialogueDom.initActiveTabNavigation();\n\n        const modalFooter = getFirst(await this.modal.getFooterPromise());\n\n        // Add the listener for clicks on the footer.\n        modalFooter.addEventListener(\n            'click',\n            this.handleFooterClick.bind(this),\n        );\n\n        // Adapt modal footer depending on the displayed carousel page.\n        modalRoot.addEventListener('slide.bs.carousel', (event) => {\n            if (event.to === undefined) {\n                return;\n            }\n            // The boostrap carousel event.to contains the index of the newly active item.\n            // The zero index is the chooser options, the first index is the module help,\n            // any other index are custom footer pages.\n            this.dialogueDom.toggleActiveFooter(event.to === 0);\n            this.dialogueDom.toggleBackButton(event.to !== 0);\n            this.dialogueDom.toggleAddButton(event.to < 2);\n        });\n    }\n\n    /**\n     * Handle the click event on the footer of the modal.\n     *\n     * @param {Object} event The event object\n     * @return {Promise} A promise that resolves when the event is handled\n     */\n    async handleFooterClick(event) {\n        if (event.target.closest(selectors.actions.addSelectedChooserOption)) {\n            this.submitAddSelectedModule();\n        }\n\n        if (\n            event.target.closest(selectors.regions.activeFooter)\n            && this.footerData.footer === true\n        ) {\n            const footerjs = await getPlugin(this.footerData.customfooterjs);\n            await footerjs.footerClickListener(event, this.footerData, this.modal);\n        }\n    }\n\n    /**\n     * Modal click handler.\n     *\n     * @param {Object} event The event object\n     * @return {Promise} A promise that resolves when the event is handled\n     */\n    async handleModalClick(event) {\n        const target = event.target;\n\n        if (target.closest(selectors.actions.optionActions.showSummary)) {\n            event.preventDefault();\n            this.handleShowSummary(target);\n            return;\n        }\n\n        if (target.closest(selectors.actions.displayCategory)) {\n            event.preventDefault();\n            this.handleDisplayCategory(target);\n            return;\n        }\n\n        if (target.closest(selectors.actions.optionActions.manageFavourite)) {\n            event.preventDefault();\n            await this.handleFavouriteClick(target);\n            return;\n        }\n\n        // From the help screen go back to the module overview.\n        if (target.matches(selectors.actions.closeOption)) {\n            event.preventDefault();\n            this.dialogueDom.hideModuleHelp(target.dataset.modname);\n            return;\n        }\n\n        // The \"clear search\" button is triggered.\n        if (target.closest(selectors.actions.clearSearch)) {\n            this.handleClearSearch();\n            return;\n        }\n\n        if (target.closest(selectors.regions.chooserOption.info)) {\n            event.preventDefault();\n            this.handleOptionSelection(target);\n            return;\n        }\n    }\n\n    /**\n     * Handle the double click event on the modal.\n     * @param {Object} event The event object\n     */\n    handleModalDoubleClick(event) {\n        const option = this.dialogueDom.getClosestChooserOption(event.target);\n        if (option !== null) {\n            this.submitAddSelectedModule(this.selectedModule);\n        }\n    }\n\n    /**\n     * Show the summary of a module when the user clicks on the \"show summary\" button.\n     *\n     * @param {HTMLElement} target The target element that triggered the event\n     */\n    handleShowSummary(target) {\n        const module = this.dialogueDom.getClosestChooserOption(target);\n        const moduleName = module.dataset.modname;\n        const moduleData = this.mappedModules.get(moduleName);\n        // We select the module now. This way the back button will keep the module selected.\n        this.handleOptionSelection(target);\n        // We need to know if the overall modal has a footer so we know when to show a real / vs fake footer.\n        moduleData.showFooter = this.modal.hasFooterContent();\n        this.dialogueDom.setBackButtonModuleData(moduleData);\n        this.dialogueDom.showModuleHelp(moduleData, this.modal);\n    }\n\n    /**\n     * Handle the display of a category when the user clicks on the \"display category\" button.\n     * @param {HTMLElement} target The target element that triggered the event\n     */\n    handleDisplayCategory(target) {\n        const category = target.dataset.category;\n        if (!category) {\n            return;\n        }\n        this.dialogueDom.hideModuleHelp();\n        const tabNav = this.dialogueDom.showCategoryTab(category);\n        tabNav.focus();\n        tabNav.scrollIntoView();\n    }\n\n    /**\n     * Handle the favourite state of a module when the user clicks on the \"starred\" button.\n     *\n     * @param {HTMLElement} target The target element that triggered the event\n     * @return {Promise} A promise that resolves when the event is handled\n     */\n    async handleFavouriteClick(target) {\n        const caller = target.closest(selectors.actions.optionActions.manageFavourite);\n        const id = caller.dataset.id;\n        const name = caller.dataset.name;\n        const internal = caller.dataset.internal;\n        const isFavourite = caller.dataset.favourited;\n\n        // Switch on fave or not.\n        if (isFavourite === 'true') {\n            await Repository.unfavouriteModule(name, id);\n            this.updateFavouriteItemValue(internal, false);\n        } else {\n            await Repository.favouriteModule(name, id);\n            this.updateFavouriteItemValue(internal, true);\n        }\n    }\n\n    /**\n     * Handle a clear search action.\n     */\n    handleClearSearch() {\n        const searchInput = this.dialogueDom.getSearchInputElement();\n        searchInput.value = \"\";\n        searchInput.focus();\n        this.toggleSearchResultsView(searchInput.value);\n    }\n\n    /**\n     * Handle the click on a chooser option.\n     *\n     * @param {HTMLElement} target The target element that triggered the event\n     */\n    handleOptionSelection(target) {\n        const option = this.dialogueDom.getClosestChooserOption(target);\n        if (option === null) {\n            return;\n        }\n        this.selectedModule = option;\n        this.dialogueDom.markChooserOptionAsSelected(option, getFirst(this.modal.getFooter()));\n    }\n\n    /**\n     * Submit the selected module to the chooser.\n     *\n     * This method will redirect the user to the URL of the selected module, if one is selected.\n     *\n     * @param {HTMLElement} newSelectedModule optional new selected module element.\n     * @return {void}\n     */\n    submitAddSelectedModule(newSelectedModule = null) {\n        if (newSelectedModule) {\n            this.handleOptionSelection(newSelectedModule);\n        }\n        if (this.selectedModule === null) {\n            return;\n        }\n        window.location.href = this.dialogueDom.getChooserOptionUrl(this.selectedModule);\n    }\n\n    /**\n     * Set up our tabindex information across the chooser.\n     *\n     * @method setupKeyboardAccessibility\n     */\n    setupKeyboardAccessibility() {\n        const mainElement = getFirst(this.modal.getModal());\n\n        mainElement.tabIndex = -1;\n\n        mainElement.addEventListener('keydown', (e) => {\n            const currentOption = this.dialogueDom.getClosestChooserOption(e.target);\n            if (currentOption === null) {\n                return;\n            }\n\n            if (e.keyCode === enter || e.keyCode === space) {\n                // Check first if the target is an internal control button (favourite or help).\n                // If that is the case, the regular click will handle the event.\n                if (e.target.closest(selectors.regions.chooserOption.actions)) {\n                    return;\n                }\n            }\n\n            if (e.keyCode === space) {\n                e.preventDefault();\n                this.handleOptionSelection(currentOption);\n            }\n            if (e.keyCode === enter) {\n                e.preventDefault();\n                this.submitAddSelectedModule(currentOption);\n            }\n            if (e.keyCode === arrowRight) {\n                e.preventDefault();\n                this.dialogueDom.focusNextChooserOption(currentOption);\n            }\n            if (e.keyCode === arrowLeft) {\n                e.preventDefault();\n                this.dialogueDom.focusPreviousChooserOption(currentOption);\n            }\n            if (e.keyCode === home) {\n                e.preventDefault();\n                this.dialogueDom.focusFirstChooserOption(currentOption);\n            }\n            if (e.keyCode === end) {\n                e.preventDefault();\n                this.dialogueDom.focusLastChooserOption(currentOption);\n            }\n        });\n    }\n\n    /**\n     * Toggle (display/hide) the search results depending on the value of the search query\n     *\n     * @method toggleSearchResultsView\n     * @param {String} searchQuery The search query\n     */\n    async toggleSearchResultsView(searchQuery) {\n        const searchResultsData = this.searchModules(searchQuery);\n\n        if (searchQuery.length > 0) {\n            await this.dialogueDom.refreshSearchResults(searchQuery, searchResultsData);\n            this.dialogueDom.showAllActivitiesTab(true);\n        } else {\n            this.dialogueDom.cleanSearchResults();\n        }\n    }\n\n    /**\n     * Return the list of modules which have a name or description that matches the given search term.\n     *\n     * @method searchModules\n     * @param {String} searchTerm The search term to match\n     * @return {Array}\n     */\n    searchModules(searchTerm) {\n        if (searchTerm === '') {\n            return this.mappedModules;\n        }\n        searchTerm = searchTerm.toLowerCase();\n        const searchResults = [];\n        this.mappedModules.forEach((activity) => {\n            const activityName = activity.title.toLowerCase();\n            const activityDesc = activity.help.toLowerCase();\n            if (activityName.includes(searchTerm) || activityDesc.includes(searchTerm)) {\n                searchResults.push(activity);\n            }\n        });\n\n        return searchResults;\n    }\n\n    /**\n     * Update the favourite item value in the mapped modules.\n     *\n     * @param {String} internal The internal name of the module.\n     * @param {Boolean} favourite Whether the module is a favourite or not.\n     * @return {Promise} A promise that resolves when the item is updated.\n     */\n    async updateFavouriteItemValue(internal, favourite) {\n        const moduleItem = this.mappedModules.find(({name}) => name === internal);\n        if (!moduleItem) {\n            return;\n        }\n        moduleItem.favourite = favourite;\n\n        this.dialogueDom.updateItemStarredIcons(internal, favourite);\n\n        if (this.dialogueDom.isFavoutiteTabActive()) {\n            this.isFavouriteTabDirty = true;\n        } else {\n            this.refreshFavouritesTabContent();\n        }\n    }\n\n    /**\n     * Refresh the favourites tab content.\n     *\n     * Note: this method will also hide the favourites tab if there are no favourite modules\n     * to keep the modal consistent.\n     *\n     * @return {Promise} A promise that resolves when the content is refreshed.\n     */\n    async refreshFavouritesTabContent() {\n        this.isFavouriteTabDirty = false;\n        const favouriteCount = this.mappedModules.filter(mod => mod.favourite === true).size;\n        this.dialogueDom.toggleFavouriteTabDisplay(favouriteCount > 0);\n        await this.dialogueDom.refreshFavouritesTabContent(this.mappedModules);\n    }\n}\n"],"names":["footerDataPromise","modulesDataPromise","bodyPromiseResolver","bodyPromise","Promise","resolve","exporter","Exporter","footerData","footerPromise","Templates","render","getFooterData","sectionModal","Modal","create","body","title","footer","large","scrollable","templateContext","classes","show","modulesData","modal","ActivityChooserDialogue","templateData","getModChooserTemplateData","error","errorTemplateData","message","modalPromise","sectionModules","partialFavourite","window","console","warn","then","catch","Notification","exception","constructor","dialogueDom","selectedModule","isFavouriteTabDirty","mappedModules","Map","forEach","module","set","componentname","link","init","this","getBodyPromise","getFooterPromise","DialogueDom","registerModalListenerEvents","setupKeyboardAccessibility","getRoot","on","ModalEvents","hidden","destroy","unmarkAllChooserOptionAsSelected","modalRoot","addEventListener","event","target","closest","selectors","regions","allTabNav","searchInput","getSearchInputElement","value","length","toggleSearchResultsView","handleModalClick","bind","handleModalDoubleClick","pending","initBootstrapComponents","relatedTarget","disableFocusAllChooserOptions","initActiveTabNavigation","isFavoutiteTabActive","refreshFavouritesTabContent","handleFooterClick","undefined","to","toggleActiveFooter","toggleBackButton","toggleAddButton","actions","addSelectedChooserOption","submitAddSelectedModule","activeFooter","footerjs","pluginName","customfooterjs","footerClickListener","optionActions","showSummary","preventDefault","handleShowSummary","displayCategory","handleDisplayCategory","manageFavourite","handleFavouriteClick","matches","closeOption","hideModuleHelp","dataset","modname","clearSearch","handleClearSearch","chooserOption","info","handleOptionSelection","getClosestChooserOption","moduleName","moduleData","get","showFooter","hasFooterContent","setBackButtonModuleData","showModuleHelp","category","tabNav","showCategoryTab","focus","scrollIntoView","caller","id","name","internal","favourited","Repository","unfavouriteModule","updateFavouriteItemValue","favouriteModule","option","markChooserOptionAsSelected","getFooter","newSelectedModule","location","href","getChooserOptionUrl","mainElement","getModal","tabIndex","e","currentOption","keyCode","enter","space","arrowRight","focusNextChooserOption","arrowLeft","focusPreviousChooserOption","home","focusFirstChooserOption","end","focusLastChooserOption","searchQuery","searchResultsData","searchModules","refreshSearchResults","showAllActivitiesTab","cleanSearchResults","searchTerm","toLowerCase","searchResults","activity","activityName","activityDesc","help","includes","push","favourite","moduleItem","find","_ref","updateItemStarredIcons","favouriteCount","filter","mod","size","toggleFavouriteTabDisplay"],"mappings":"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"}