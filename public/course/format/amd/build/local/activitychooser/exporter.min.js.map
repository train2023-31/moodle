{"version":3,"file":"exporter.min.js","sources":["../../../src/local/activitychooser/exporter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to generate template data for the activity chooser.\n *\n * @module     core_courseformat/local/activitychooser/exporter\n * @copyright  2025 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getStrings} from 'core/str';\n\nconst activityCategories = [\n    'administration',\n    'assessment',\n    'collaboration',\n    'communication',\n    'content',\n    'interactivecontent',\n];\n\nlet allStrings = null;\n\nloadNecessaryStrings();\n\nexport default class {\n    /**\n     * A tab data structure.\n     *\n     * @typedef {object} TabData\n     * @property {String} tabId the tab ID\n     * @property {Boolean} active whether the tab is active or not\n     * @property {Array} items the filtered modules to be displayed in the tab\n     * @property {Boolean} displayed whether the tab is displayed or not\n     * @property {String} tabLabel the tab label\n     * @property {String|null} tabHelp the help text for the tab (optional)\n     */\n\n    /**\n     * @typedef {Object} ModuleHelpData\n     * @property {String} name The name of the module.\n     * @property {String} description The description of the module.\n     * @property {Array<ModulePurposeData>} purposes The purposes of the module.\n     * @property {Array} details Additional details about the module.\n     */\n\n    /**\n     * @typedef {Object} ModulePurposeData\n     * @property {String} purposename The name of the purpose.\n     * @property {String} purposelabel The label of the purpose.\n     */\n\n    /**\n     * Generate a tab data object for the activity chooser.\n     *\n     * @private\n     * @param {String} tabId Tab ID.\n     * @param {Array} filteredModules Filtered modules to be displayed in the tab.\n     * @param {String} tabLabel Tab label.\n     * @param {String|null} tabHelp Help text for the tab (optional).\n     * @param {Boolean} active Whether the tab is active or not.\n     * @return {TabData} Tab data object.\n     */\n    getTabData(tabId, filteredModules, tabLabel, tabHelp = null, active = false) {\n        const result = {\n            tabId: tabId,\n            active: active,\n            items: filteredModules,\n            displayed: filteredModules.length > 0,\n            tabLabel,\n        };\n        if (tabHelp) {\n            result.tabHelp = tabHelp;\n        }\n        return result;\n    }\n\n    /**\n     * Normalise the modules data to be used in the chooser.\n     *\n     * The modulesData can be a plain array or a Map. This method will convert it to a\n     * plain array of objects.\n     *\n     * @param {Array|Map} modulesData Modules data to be used in the chooser.\n     * @return {Array} Normalised modules data.\n     */\n    normaliseModulesData(modulesData) {\n        if (modulesData instanceof Map) {\n            modulesData = Array.from(modulesData.values());\n        } else if (!Array.isArray(modulesData)) {\n            throw new Error('Invalid modules data format. Expected an array or a Map.');\n        }\n        return modulesData;\n    }\n\n    /**\n     * Fetch the chooser template data for a specific section.\n     *\n     * @param {Array|Map} modulesData Modules data to be used in the chooser.\n     * @return {Promise<Object>} Promise resolved with the template data.\n     */\n    async getModChooserTemplateData(modulesData) {\n        modulesData = this.normaliseModulesData(modulesData);\n        const allStrings = await loadNecessaryStrings();\n        const favouriteTab = await this.getFavouriteTabData(modulesData);\n\n        const tabs = [\n            {\n                ...this.getTabData(\n                    'all',\n                    modulesData,\n                    allStrings.all,\n                    null,\n                    !favouriteTab.displayed,\n                ),\n                hasSearchResults: true, // The all tab will also show search results.\n            },\n            favouriteTab,\n            {\n                ...this.getTabData(\n                    'recommended',\n                    modulesData.filter(mod => mod.recommended === true),\n                    allStrings.recommended,\n                    allStrings.recommended_help\n                ),\n                separator: true, // Add a separator before the purpose categories.\n            },\n        ];\n\n        activityCategories.forEach((category) => {\n            const categoryModules = modulesData.filter(mod => mod.purpose == category || mod.otherpurpose == category);\n            if (categoryModules.length === 0) {\n                return;\n            }\n            tabs.push(\n                this.getTabData(\n                    category,\n                    categoryModules,\n                    allStrings['mod_purpose_' + category],\n                    allStrings['mod_purpose_' + category + '_help']\n                )\n            );\n        });\n\n        return {\n            modules: modulesData,\n            tabs,\n        };\n    }\n\n    /**\n     * Get the module help template data.\n     *\n     * @param {Object} moduleData Data of the module to get help for.\n     * @return {Promise<ModuleHelpData>} Promise resolved with the module help data.\n     */\n    async getModuleHelpTemplateData(moduleData) {\n        const allStrings = await loadNecessaryStrings();\n        const data = {\n            ...moduleData,\n            purposes: [],\n        };\n        // Add purpose information from all related fields.\n        for (const purposeField of ['purpose', 'otherpurpose']) {\n            if (\n                !moduleData[purposeField]\n                || !activityCategories.includes(moduleData[purposeField])\n            ) {\n                continue;\n            }\n            data.purposes.push({\n                purposename: moduleData[purposeField],\n                purposelabel: allStrings[`mod_purpose_${moduleData[purposeField]}`],\n            });\n        }\n        data.haspurposes = data.purposes.length > 0;\n        // The rest of details are displayed as a simpler list.\n        data.details = [\n            {\n                label: allStrings['gradable'],\n                value: moduleData.gradable ? allStrings['yes'] : allStrings['no'],\n            },\n        ];\n        return data;\n    }\n\n    /**\n     * Get the favourite tab data.\n     *\n     * @param {Array|Map} modulesData Modules data to be used in the chooser.\n     * @return {Promise<TabData>} Promise resolved with the template data.\n     */\n    async getFavouriteTabData(modulesData) {\n        modulesData = this.normaliseModulesData(modulesData);\n        const allStrings = await loadNecessaryStrings();\n\n        // We need to deconstruct the modules data to ensure it is an array.\n        const favouriteModules = modulesData.filter(\n            mod => {\n                return mod.favourite === true;\n            }\n        );\n\n        return this.getTabData(\n            'favourites',\n            favouriteModules,\n            allStrings.favourites,\n            null,\n            favouriteModules.length > 0,\n        );\n    }\n\n    /**\n     * Get the search result template data.\n     *\n     * @param {String} searchQuery The search query string.\n     * @param {Array|Map} resultsModulesData Modules data to be used in the chooser.\n     * @return {Object} The template data.\n     */\n    getSearchResultData(searchQuery, resultsModulesData) {\n        resultsModulesData = this.normaliseModulesData(resultsModulesData);\n        return {\n            'searchresultsnumber': resultsModulesData.length,\n            'searchresults': resultsModulesData,\n            'hasresults': resultsModulesData.length > 0,\n            'searchquery': searchQuery,\n        };\n    }\n\n    /**\n     * Get the number of items in a tab.\n     *\n     * @param {TabData} tabData The tab data.\n     * @return {Number} The number of items in the tab.\n     */\n    countTabItems(tabData) {\n        return tabData.items?.length ?? 0;\n    }\n\n    /**\n     * Get the activity chooser footer template data.\n     * @param {Object} footerData The active footer data object.\n     * @return {Object} The template data.\n     */\n    getFooterData(footerData) {\n        return {\n            'activeFooter': footerData.customfootertemplate,\n        };\n    }\n}\n\n/**\n * Load the necessary strings for the activity chooser.\n *\n * @return {Promise<Object>} Promise resolved with the loaded strings.\n */\nasync function loadNecessaryStrings() {\n    if (allStrings !== null) {\n        return allStrings;\n    }\n    allStrings = {};\n\n    const stringToLoad = [\n        {key: 'all', component: 'core'},\n        {key: 'yes', component: 'core'},\n        {key: 'no', component: 'core'},\n        {key: 'favourites', component: 'core'},\n        {key: 'recommended', component: 'core'},\n        {key: 'gradable', component: 'core'},\n        {key: 'recommended_help', component: 'core_course'},\n        ...activityCategories.map(\n            (key) => ({\n                key: 'mod_purpose_' + key,\n                component: 'core_course',\n            })\n        ),\n        ...activityCategories.map(\n            (key) => ({\n                key: 'mod_purpose_' + key + '_help',\n                component: 'core_course',\n            })\n        ),\n    ];\n\n    const loadedStrings = await getStrings(stringToLoad);\n    stringToLoad.forEach(({key}, index) => {\n        allStrings[key] = loadedStrings[index];\n    });\n    return allStrings;\n}\n"],"names":["activityCategories","allStrings","loadNecessaryStrings","stringToLoad","key","component","map","loadedStrings","forEach","index","getTabData","tabId","filteredModules","tabLabel","tabHelp","result","active","items","displayed","length","normaliseModulesData","modulesData","Map","Array","from","values","isArray","Error","this","favouriteTab","getFavouriteTabData","tabs","all","hasSearchResults","filter","mod","recommended","recommended_help","separator","category","categoryModules","purpose","otherpurpose","push","modules","moduleData","data","purposes","purposeField","includes","purposename","purposelabel","haspurposes","details","label","value","gradable","favouriteModules","favourite","favourites","getSearchResultData","searchQuery","resultsModulesData","countTabItems","tabData","_tabData$items","getFooterData","footerData","customfootertemplate"],"mappings":";;;;;;;;MAyBMA,mBAAqB,CACvB,iBACA,aACA,gBACA,gBACA,UACA,0BAGAC,WAAa,KAEjBC,sCAyOeA,0BACQ,OAAfD,kBACOA,WAEXA,WAAa,SAEPE,aAAe,CACjB,CAACC,IAAK,MAAOC,UAAW,QACxB,CAACD,IAAK,MAAOC,UAAW,QACxB,CAACD,IAAK,KAAMC,UAAW,QACvB,CAACD,IAAK,aAAcC,UAAW,QAC/B,CAACD,IAAK,cAAeC,UAAW,QAChC,CAACD,IAAK,WAAYC,UAAW,QAC7B,CAACD,IAAK,mBAAoBC,UAAW,kBAClCL,mBAAmBM,KACjBF,OACGA,IAAK,eAAiBA,IACtBC,UAAW,qBAGhBL,mBAAmBM,KACjBF,OACGA,IAAK,eAAiBA,IAAM,QAC5BC,UAAW,mBAKjBE,oBAAsB,mBAAWJ,qBACvCA,aAAaK,SAAQ,MAAQC,aAAPL,IAACA,UACnBH,WAAWG,KAAOG,cAAcE,UAE7BR,yCAjOPS,WAAWC,MAAOC,gBAAiBC,cAAUC,+DAAU,WAC7CC,OAAS,CACXJ,MAAOA,MACPK,+DACAC,MAAOL,gBACPM,UAAWN,gBAAgBO,OAAS,EACpCN,SAAAA,iBAEAC,UACAC,OAAOD,QAAUA,SAEdC,OAYXK,qBAAqBC,gBACbA,uBAAuBC,IACvBD,YAAcE,MAAMC,KAAKH,YAAYI,eAClC,IAAKF,MAAMG,QAAQL,mBAChB,IAAIM,MAAM,mEAEbN,4CASqBA,aAC5BA,YAAcO,KAAKR,qBAAqBC,mBAClCpB,iBAAmBC,uBACnB2B,mBAAqBD,KAAKE,oBAAoBT,aAE9CU,KAAO,CACT,IACOH,KAAKlB,WACJ,MACAW,YACApB,WAAW+B,IACX,MACCH,aAAaX,WAElBe,kBAAkB,GAEtBJ,aACA,IACOD,KAAKlB,WACJ,cACAW,YAAYa,QAAOC,MAA2B,IAApBA,IAAIC,cAC9BnC,WAAWmC,YACXnC,WAAWoC,kBAEfC,WAAW,WAInBtC,mBAAmBQ,SAAS+B,iBAClBC,gBAAkBnB,YAAYa,QAAOC,KAAOA,IAAIM,SAAWF,UAAYJ,IAAIO,cAAgBH,WAClE,IAA3BC,gBAAgBrB,QAGpBY,KAAKY,KACDf,KAAKlB,WACD6B,SACAC,gBACAvC,WAAW,eAAiBsC,UAC5BtC,WAAW,eAAiBsC,SAAW,cAK5C,CACHK,QAASvB,YACTU,KAAAA,sCAUwBc,kBACtB5C,iBAAmBC,uBACnB4C,KAAO,IACND,WACHE,SAAU,QAGT,MAAMC,eAAgB,CAAC,UAAW,gBAE9BH,WAAWG,eACRhD,mBAAmBiD,SAASJ,WAAWG,gBAI/CF,KAAKC,SAASJ,KAAK,CACfO,YAAaL,WAAWG,cACxBG,aAAclD,iCAA0B4C,WAAWG,yBAG3DF,KAAKM,YAAcN,KAAKC,SAAS5B,OAAS,EAE1C2B,KAAKO,QAAU,CACX,CACIC,MAAOrD,WAAU,SACjBsD,MAAOV,WAAWW,SAAWvD,WAAU,IAAUA,WAAU,KAG5D6C,+BASezB,aACtBA,YAAcO,KAAKR,qBAAqBC,mBAClCpB,iBAAmBC,uBAGnBuD,iBAAmBpC,YAAYa,QACjCC,MAC6B,IAAlBA,IAAIuB,mBAIZ9B,KAAKlB,WACR,aACA+C,iBACAxD,WAAW0D,WACX,KACAF,iBAAiBtC,OAAS,GAWlCyC,oBAAoBC,YAAaC,0BAEtB,sBADPA,mBAAqBlC,KAAKR,qBAAqB0C,qBAED3C,qBACzB2C,8BACHA,mBAAmB3C,OAAS,cAC3B0C,aAUvBE,cAAcC,8GACHA,QAAQ/C,uCAARgD,eAAe9C,8DAAU,EAQpC+C,cAAcC,kBACH,cACaA,WAAWC"}