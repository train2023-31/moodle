{"version":3,"file":"checkbox-toggleall.min.js","sources":["../src/checkbox-toggleall.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A module to help with toggle select/deselect all.\n *\n * @module     core/checkbox-toggleall\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/pubsub'], function($, PubSub) {\n\n    /**\n     * Whether event listeners have already been registered.\n     *\n     * @private\n     * @type {boolean}\n     */\n    var registered = false;\n\n    /**\n     * List of custom events that this module publishes.\n     *\n     * @private\n     * @type {{checkboxToggled: string}}\n     */\n    var events = {\n        checkboxToggled: 'core/checkbox-toggleall:checkboxToggled',\n    };\n\n    /**\n     * Fetches elements that are member of a given toggle group.\n     *\n     * @private\n     * @param {jQuery} root The root jQuery element.\n     * @param {string} toggleGroup The toggle group name that we're searching form.\n     * @param {boolean} exactMatch Whether we want an exact match we just want to match toggle groups that start with the given\n     *                             toggle group name.\n     * @returns {jQuery} The elements matching the given toggle group.\n     */\n    var getToggleGroupElements = function(root, toggleGroup, exactMatch) {\n        if (exactMatch) {\n            return root.find('[data-action=\"toggle\"][data-togglegroup=\"' + toggleGroup + '\"]');\n        } else {\n            return root.find('[data-action=\"toggle\"][data-togglegroup^=\"' + toggleGroup + '\"]');\n        }\n    };\n\n    /**\n     * Fetches the target checkboxes for a given toggle group.\n     *\n     * @private\n     * @param {jQuery} root The root jQuery element.\n     * @param {string} toggleGroup The toggle group name.\n     * @returns {jQuery} The target checkboxes belonging to the toggle group.\n     */\n    var getAllTargetCheckboxes = function(root, toggleGroup) {\n        const targets = getToggleGroupElements(root, toggleGroup, false).filter('[data-toggle=\"target\"]');\n\n        // TODO: Remove this backward compatibility code in Moodle 6.0.\n        const oldTargets = getToggleGroupElements(root, toggleGroup, false).filter('[data-toggle=\"slave\"]');\n        if (Array.isArray(oldTargets) && oldTargets.length > 0) {\n            window.console.warn('The use of data-toggle=\"slave\" is deprecated. Please use data-toggle=\"target\" instead.');\n            targets.concat(oldTargets);\n        }\n        // End of backward compatibility code.\n\n        return targets;\n    };\n\n    /**\n     * Fetches the toggler elements (checkboxes or buttons) that control the target checkboxes in a given toggle group.\n     *\n     * @private\n     * @param {jQuery} root The root jQuery element.\n     * @param {string} toggleGroup The toggle group name.\n     * @param {boolean} exactMatch\n     * @returns {jQuery} The control elements belonging to the toggle group.\n     */\n    var getControlCheckboxes = function(root, toggleGroup, exactMatch) {\n        const togglers = getToggleGroupElements(root, toggleGroup, exactMatch).filter('[data-toggle=\"toggler\"]');\n\n        // TODO: Remove this backward compatibility code in Moodle 6.0.\n        const oldTogglers = getToggleGroupElements(root, toggleGroup, exactMatch).filter('[data-toggle=\"master\"]');\n        if (Array.isArray(oldTogglers) && oldTogglers.length > 0) {\n            window.console.warn('The use of data-toggle=\"master\" is deprecated. Please use data-toggle=\"toggler\" instead.');\n            togglers.concat(oldTogglers);\n        }\n        // End of backward compatibility code.\n\n        return togglers;\n    };\n\n    /**\n     * Fetches the action elements that perform actions on the selected checkboxes in a given toggle group.\n     *\n     * @private\n     * @param {jQuery} root The root jQuery element.\n     * @param {string} toggleGroup The toggle group name.\n     * @returns {jQuery} The action elements belonging to the toggle group.\n     */\n    var getActionElements = function(root, toggleGroup) {\n        return getToggleGroupElements(root, toggleGroup, true).filter('[data-toggle=\"action\"]');\n    };\n\n    /**\n     * Toggles the target checkboxes in a given toggle group when a toggler element in that toggle group is toggled.\n     *\n     * @private\n     * @param {Object} e The event object.\n     */\n    var toggleTargetsFromTogglers = function(e) {\n        var root = e.data.root;\n        var target = $(e.target);\n\n        var toggleGroupName = target.data('togglegroup');\n        var targetState;\n        if (target.is(':checkbox')) {\n            targetState = target.is(':checked');\n        } else {\n            targetState = target.data('checkall') === 1;\n        }\n\n        toggleTargetsToState(root, toggleGroupName, targetState);\n    };\n\n    /**\n     * Toggles the target checkboxes from the togglers.\n     *\n     * @param {HTMLElement} root\n     * @param {String} toggleGroupName\n     * @deprecated since Moodle 5.0.\n     */\n    var updateSlavesFromMasterState = function(root, toggleGroupName) {\n        window.console.warn(\n            'The use of updateSlavesFromMasterState is deprecated. Please use updateTargetsFromTogglerState instead.'\n        );\n        updateTargetsFromTogglerState(root, toggleGroupName);\n    };\n\n    /**\n     * Toggles the target checkboxes from the togglers.\n     *\n     * @param {HTMLElement} root\n     * @param {String} toggleGroupName\n     */\n    var updateTargetsFromTogglerState = function(root, toggleGroupName) {\n        // Normalise to jQuery Object.\n        root = $(root);\n\n        var target = getControlCheckboxes(root, toggleGroupName, false);\n        var targetState;\n        if (target.is(':checkbox')) {\n            targetState = target.is(':checked');\n        } else {\n            targetState = target.data('checkall') === 1;\n        }\n\n        toggleTargetsToState(root, toggleGroupName, targetState);\n    };\n\n    /**\n     * Toggles the toggler checkboxes and action elements in a given toggle group.\n     *\n     * @param {jQuery} root The root jQuery element.\n     * @param {String} toggleGroupName The name of the toggle group\n     */\n    var toggleTogglersAndActionElements = function(root, toggleGroupName) {\n        var toggleGroupTargets = getAllTargetCheckboxes(root, toggleGroupName);\n        if (toggleGroupTargets.length > 0) {\n            var toggleGroupCheckedTargets = toggleGroupTargets.filter(':checked');\n            var targetState = toggleGroupTargets.length === toggleGroupCheckedTargets.length;\n\n            // Make sure to toggle the exact toggler checkbox in the given toggle group.\n            setTogglerStates(root, toggleGroupName, targetState, true);\n            // Enable the action elements if there's at least one checkbox checked in the given toggle group.\n            // Disable otherwise.\n            setActionElementStates(root, toggleGroupName, !toggleGroupCheckedTargets.length);\n        }\n    };\n\n    /**\n     * Returns an array containing every toggle group level of a given toggle group.\n     *\n     * @param {String} toggleGroupName The name of the toggle group\n     * @return {Array} toggleGroupLevels Array that contains every toggle group level of a given toggle group\n     */\n    var getToggleGroupLevels = function(toggleGroupName) {\n        var toggleGroups = toggleGroupName.split(' ');\n        var toggleGroupLevels = [];\n        var toggleGroupLevel = '';\n\n        toggleGroups.forEach(function(toggleGroupName) {\n            toggleGroupLevel += ' ' + toggleGroupName;\n            toggleGroupLevels.push(toggleGroupLevel.trim());\n        });\n\n        return toggleGroupLevels;\n    };\n\n    /**\n     * Toggles the target checkboxes to a specific state.\n     *\n     * @param {HTMLElement} root\n     * @param {String} toggleGroupName\n     * @param {Bool} targetState\n     */\n    var toggleTargetsToState = function(root, toggleGroupName, targetState) {\n        var targets = getAllTargetCheckboxes(root, toggleGroupName);\n        // Set the target checkboxes from the togglers and manually trigger the native 'change' event.\n        targets.prop('checked', targetState).trigger('change');\n        // Get all checked targets after the change of state.\n        var checkedTargets = targets.filter(':checked');\n\n        // Toggle the toggler checkbox in the given toggle group.\n        setTogglerStates(root, toggleGroupName, targetState, false);\n        // Enable the action elements if there's at least one checkbox checked in the given toggle group. Disable otherwise.\n        setActionElementStates(root, toggleGroupName, !checkedTargets.length);\n\n        // Get all toggle group levels and toggle accordingly all parent toggler checkboxes and action elements from each\n        // level. Exclude the given toggle group (toggleGroupName) as the toggler checkboxes and action elements from this\n        // level have been already toggled.\n        var toggleGroupLevels = getToggleGroupLevels(toggleGroupName)\n            .filter(toggleGroupLevel => toggleGroupLevel !== toggleGroupName);\n\n        toggleGroupLevels.forEach(function(toggleGroupLevel) {\n            // Toggle the toggler checkboxes action elements in the given toggle group level.\n            toggleTogglersAndActionElements(root, toggleGroupLevel);\n        });\n\n        PubSub.publish(events.checkboxToggled, {\n            root: root,\n            toggleGroupName: toggleGroupName,\n            targets: targets,\n            checkedTargets: checkedTargets,\n            anyChecked: targetState,\n        });\n    };\n\n    /**\n     * Set the state for an entire group of checkboxes.\n     *\n     * @param {HTMLElement} root\n     * @param {String} toggleGroupName\n     * @param {Bool} targetState\n     */\n    var setGroupState = function(root, toggleGroupName, targetState) {\n        // Normalise to jQuery Object.\n        root = $(root);\n\n        // Set the toggler and targets.\n        setTogglerStates(root, toggleGroupName, targetState, true);\n        toggleTargetsToState(root, toggleGroupName, targetState);\n    };\n\n    /**\n     * Toggles the toggler checkboxes in a given toggle group when all or none of the target checkboxes in the same toggle group\n     * have been selected.\n     *\n     * @private\n     * @param {Object} e The event object.\n     */\n    var toggleTogglersFromTargets = function(e) {\n        var root = e.data.root;\n        var target = $(e.target);\n        var toggleGroupName = target.data('togglegroup');\n        var targets = getAllTargetCheckboxes(root, toggleGroupName);\n        var checkedTargets = targets.filter(':checked');\n\n        // Get all toggle group levels for the given toggle group and toggle accordingly all toggler checkboxes\n        // and action elements from each level.\n        var toggleGroupLevels = getToggleGroupLevels(toggleGroupName);\n        toggleGroupLevels.forEach(function(toggleGroupLevel) {\n            // Toggle the toggler checkboxes action elements in the given toggle group level.\n            toggleTogglersAndActionElements(root, toggleGroupLevel);\n        });\n\n        PubSub.publish(events.checkboxToggled, {\n            root: root,\n            toggleGroupName: toggleGroupName,\n            targets: targets,\n            checkedTargets: checkedTargets,\n            anyChecked: !!checkedTargets.length,\n        });\n    };\n\n    /**\n     * Enables or disables the action elements.\n     *\n     * @private\n     * @param {jQuery} root The root jQuery element.\n     * @param {string} toggleGroupName The toggle group name of the action element(s).\n     * @param {boolean} disableActionElements Whether to disable or to enable the action elements.\n     */\n    var setActionElementStates = function(root, toggleGroupName, disableActionElements) {\n        getActionElements(root, toggleGroupName).prop('disabled', disableActionElements);\n    };\n\n    /**\n     * Selects or deselects the toggler elements.\n     *\n     * @private\n     * @param {jQuery} root The root jQuery element.\n     * @param {string} toggleGroupName The toggle group name of the toggler element(s).\n     * @param {boolean} targetState Whether to select (true) or deselect (false).\n     * @param {boolean} exactMatch Whether to do an exact match for the toggle group name or not.\n     */\n    var setTogglerStates = function(root, toggleGroupName, targetState, exactMatch) {\n        // Set the toggler checkboxes value and ARIA labels..\n        var togglers = getControlCheckboxes(root, toggleGroupName, exactMatch);\n        togglers.prop('checked', targetState);\n        togglers.each(function(i, togglerElement) {\n            togglerElement = $(togglerElement);\n\n            var targetString;\n            if (targetState) {\n                targetString = togglerElement.data('toggle-deselectall');\n            } else {\n                targetString = togglerElement.data('toggle-selectall');\n            }\n\n            if (togglerElement.is(':checkbox')) {\n                var togglerLabel = root.find('[for=\"' + togglerElement.attr('id') + '\"]');\n                if (togglerLabel.length) {\n                    if (togglerLabel.html() !== targetString) {\n                        togglerLabel.html(targetString);\n                    }\n                }\n            } else {\n                togglerElement.text(targetString);\n                // Set the checkall data attribute.\n                togglerElement.data('checkall', targetState ? 0 : 1);\n            }\n        });\n    };\n\n    /**\n     * Registers the event listeners.\n     *\n     * @private\n     */\n    var registerListeners = function() {\n        if (!registered) {\n            registered = true;\n\n            var root = $(document.body);\n            root.on('click', '[data-action=\"toggle\"][data-toggle=\"toggler\"]', {root: root}, toggleTargetsFromTogglers);\n            root.on('click', '[data-action=\"toggle\"][data-toggle=\"target\"]', {root: root}, toggleTogglersFromTargets);\n\n            // TODO: Remove this backward compatibility code in Moodle 6.0.\n            const oldTogglers = document.querySelectorAll('[data-action=\"toggle\"][data-toggle=\"master\"]');\n            if (oldTogglers.length > 0) {\n                window.console.warn('The use of data-toggle=\"master\" is deprecated. Please use data-toggle=\"toggler\" instead.');\n                root.on('click', '[data-action=\"toggle\"][data-toggle=\"master\"]', {root: root}, toggleTargetsFromTogglers);\n            }\n            const oldTargets = document.querySelectorAll('[data-action=\"toggle\"][data-toggle=\"slave\"]');\n            if (oldTargets.length > 0) {\n                window.console.warn('The use of data-toggle=\"slave\" is deprecated. Please use data-toggle=\"target\" instead.');\n                root.on('click', '[data-action=\"toggle\"][data-toggle=\"slave\"]', {root: root}, toggleTogglersFromTargets);\n            }\n            // End of backward compatibility code.\n        }\n    };\n\n    return {\n        init: function() {\n            registerListeners();\n        },\n        events: events,\n        setGroupState: setGroupState,\n        updateSlavesFromMasterState: updateSlavesFromMasterState, // TODO: Remove this deprecated method export in Moodle 6.0.\n        updateTargetsFromTogglerState: updateTargetsFromTogglerState,\n    };\n});\n"],"names":["define","$","PubSub","registered","events","checkboxToggled","getToggleGroupElements","root","toggleGroup","exactMatch","find","getAllTargetCheckboxes","targets","filter","oldTargets","Array","isArray","length","window","console","warn","concat","getControlCheckboxes","togglers","oldTogglers","toggleTargetsFromTogglers","e","targetState","data","target","toggleGroupName","is","toggleTargetsToState","updateTargetsFromTogglerState","toggleTogglersAndActionElements","toggleGroupTargets","toggleGroupCheckedTargets","setTogglerStates","setActionElementStates","getToggleGroupLevels","toggleGroups","split","toggleGroupLevels","toggleGroupLevel","forEach","push","trim","prop","trigger","checkedTargets","publish","anyChecked","toggleTogglersFromTargets","disableActionElements","getActionElements","each","i","togglerElement","targetString","togglerLabel","attr","html","text","init","document","body","on","querySelectorAll","registerListeners","setGroupState","updateSlavesFromMasterState"],"mappings":"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"}