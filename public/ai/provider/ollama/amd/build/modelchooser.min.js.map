{"version":3,"file":"modelchooser.min.js","sources":["../src/modelchooser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AI provider model selection handler.\n *\n * @module     aiprovider_ollama/modelchooser\n * @copyright  2025 Huong Nguyen <huongnv13@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {populateFields, clearFields} from 'core_ai/helper';\n\nconst Selectors = {\n    fields: {\n        selector: '[data-modelchooser-field=\"selector\"]',\n        updateButton: '[data-modelchooser-field=\"updateButton\"]',\n        modelSettingsContainer: 'id_modelsettingsheadercontainer',\n    },\n};\n\n/**\n * Initialise the AI provider chooser.\n */\nexport const init = () => {\n    const modelSelector = document.querySelector(Selectors.fields.selector);\n    if (modelSelector) {\n        // If we have stored model settings, populate them in their respective fields.\n        const storedModelSettings = JSON.parse(modelSelector.getAttribute('data-storedmodelsettings'));\n        const modelSettings = storedModelSettings[modelSelector.value];\n        const containerId = Selectors.fields.modelSettingsContainer;\n\n        if (modelSettings) {\n            populateFields(modelSettings, containerId);\n        } else {\n            clearFields(containerId);\n        }\n\n        modelSelector.addEventListener('change', e => {\n            modelSelector.options[e.target.selectedIndex].selected = true;\n            const form = e.target.closest('form');\n            const updateButton = form.querySelector(Selectors.fields.updateButton);\n            updateButton.click();\n        });\n    }\n};\n"],"names":["Selectors","selector","updateButton","modelSettingsContainer","modelSelector","document","querySelector","modelSettings","JSON","parse","getAttribute","value","containerId","addEventListener","e","options","target","selectedIndex","selected","closest","click"],"mappings":";;;;;;;;MAwBMA,iBACM,CACJC,SAAU,uCACVC,aAAc,2CACdC,uBAAwB,iDAOZ,WACVC,cAAgBC,SAASC,cAAcN,iBAAiBC,aAC1DG,cAAe,OAGTG,cADsBC,KAAKC,MAAML,cAAcM,aAAa,6BACxBN,cAAcO,OAClDC,YAAcZ,iBAAiBG,uBAEjCI,yCACeA,cAAeK,qCAElBA,aAGhBR,cAAcS,iBAAiB,UAAUC,IACrCV,cAAcW,QAAQD,EAAEE,OAAOC,eAAeC,UAAW,EAC5CJ,EAAEE,OAAOG,QAAQ,QACJb,cAAcN,iBAAiBE,cAC5CkB"}